# -*- coding: utf-8 -*-
"""Capstone Muhamad Rafi N - AWS SaaS Sales

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t42mjuNJogXNmz_3KD4bOYc7pguHIdvH

# Amazon AWS SaaS Sales

# 1. Introduction

## 1.1 Background Introduction

Latar belakang dari data AWS SaaS Sales ini bertujuan untuk memberikan wawasan mendalam terkait performa penjualan dan laba di setiap wilayah (region), serta mengidentifikasi pola-pola yang unik atau anomali dalam hubungan antara penjualan dan laba. Dalam dunia bisnis SaaS yang kompetitif, memahami performa penjualan dan laba tidak hanya penting untuk meningkatkan pendapatan, tetapi juga untuk mengevaluasi efektivitas strategi operasional dan pemasaran di berbagai wilayah geografis.

Setiap wilayah memiliki karakteristik pasar yang berbeda, mulai dari preferensi pelanggan, tingkat persaingan, hingga faktor ekonomi makro yang memengaruhi performa bisnis. Misalnya, beberapa wilayah mungkin menunjukkan angka penjualan yang tinggi, namun tidak diikuti oleh laba yang sepadan. Fenomena ini dapat disebabkan oleh biaya operasional yang tinggi, kebijakan harga yang kurang optimal, atau penawaran diskon yang signifikan.

Analisis ini menjadi krusial dalam menentukan wilayah mana yang memberikan kontribusi terbesar terhadap keberlanjutan bisnis dan wilayah mana yang memerlukan perhatian lebih untuk meningkatkan profitabilitas. Dengan memahami hubungan antara penjualan dan laba di setiap wilayah, perusahaan dapat mengambil keputusan berbasis data, seperti merumuskan strategi harga, mengoptimalkan operasi, atau meningkatkan efisiensi pemasaran, guna memaksimalkan potensi setiap wilayah.

Dengan pendekatan analitis terhadap data ini, kita dapat mengungkap faktor-faktor yang memengaruhi kinerja bisnis di berbagai wilayah dan menemukan peluang tersembunyi yang mungkin belum tergali sebelumnya. Hal ini tidak hanya mendukung pertumbuhan bisnis jangka pendek, tetapi juga memberikan dasar yang kuat untuk perencanaan strategis jangka panjang.

## 1.2 Problem Statement

Dalam lanskap Software as a Service (SaaS), memahami perilaku customer, pola customer, dan tren dari penjualan dan pendapatan sangat penting untuk mempertahankan pertumbuhan dan meningkatkan retensi customer. Tujuan dari proyek analisis ini adalah untuk memanfaatkan data customer dan transaksi yang ada untuk:
- Menganalisis performa penjualan dan laba untuk mengidentifikasi kinerja perusahaan dengan melihat dari tren penjualan dan tren laba di setiap tahun
- Menganalisis segmen pelanggan (SMB, Strategic, dan Enterprise) berdasarkan pola pembelian dan memetakan distribusi customer
- Mengidentifikasi fenomena atau anomali dan menciptakan strategi bisnis apa yang akan dilakukan.

# 2. Data Preparation
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
import tabulate as tb
from scipy import stats


pd.set_option('display.max_columns', None)
import warnings
warnings.filterwarnings('ignore')

"""## 2.1 Data Understanding"""

# Import SaaS-Sales data sebagai df
df = pd.read_csv('SaaS-Sales.csv')
df.head()

"""| **Column Name**   | **Description**                                                        |
|-------------------|------------------------------------------------------------------------|
| **Row ID**        | Unique Value untuk identifikasi dari masing-masing order.                              |
| **Order ID**      | Unique Value untuk identifikasi dari masing-masing order.                                    |
| **Order Date**    | Tanggal ketika order terjadi.                                    |
| **Date Key**      | Numerikal dari Order Kolom Order Date (YYYYMMDD).               |
| **Contact Name**  | Nama customer yang melakukan transaksi.                           |
| **Country**       | Nama negara yang melakukan transaksi.                                |
| **City**          | Nama kota yang melakukan transaksi.                                   |
| **Region**        | Nama wilayah yang melakukan transaksi.                                 |
| **Subregion**     | Nama subwilayah yang melakukan transaksi.                              |
| **Customer**      | Nama perusahaan yang melakukan transaksi.                         |
| **Customer ID**   | Unique value untuk identifikasi dari customer.                                 |
| **Industry**      | Industri dari tempat customer berasal.                                  |
| **Segment**       | Segmen Customer (SMB, Strategic, Enterprise, dll.).               |
| **Product**       | Product yang dipesan.                                          |
| **License**       | Kunci lisensi untuk produk.                                       |
| **Sales**         | Total jumlah penjualan untuk transaksi.                            |
| **Quantity**      |Total jumlah item dalam transaksi.                          |
| **Discount**      | Diskon yang diterapkan pada transaksi.                               |
| **Profit**        | Laba dari transaksi.                                       |

"""

# Cek informasi data
df.info()

"""**Tipe data yang perlu diganti**

1. Row ID tidak terlalu penting dikarenakan bisa digantikan oleh nomor index

2. Tipe Data Order Data salah, kita harus mengubah dari objek diganti menjadi datetime

3. Date Key merupakan data redundant atau perulangan data yang sudah ada dan bisa digantikan oleh Order Date.

4. Tipe Data Customer ID salah, kita harus mengubah dari tipe data integer menjadi string karena customer ID sebagai ordinal (menunjukkan label atau kode) bukan nominal
"""

# Cek data dengan menggunakan statistik deskripsi
df.describe()

"""## 2.2 Data Cleaning

### 2.2.1 Drop Unused Columns
"""

# Drop unused columns
df.drop(columns=['Date Key', 'Row ID'], inplace= True)

"""'Date Key' dan 'Row ID' column di drop karena mereka berdua adalah redundant columns. Redundant Column merupakan kolom yang berisi pengulangan dari kolom yang sudah ada. Date Key sama dengan Order Date dan Row ID tidak perlu digunakan sebab bisa digantikan oleh table index

### 2.2.2 Change Data Type
"""

# Rubah incorrect data

print("DataFrame sebelum penyesuaian\n")
df.info()

"""Sudah dijelaskan sebelumnya, kedua kolom di dataset mempunyai tipe data yang salah yaitu Kolom 'Order Date' dan 'Customer ID'. Kita perlu untuk mengubah tipe data terlebih dahulu sehingga kita bisa menggunakan data tersebut secara benar dalam analisis yang nantinya akan dilakukan"""

# Changing the Order Date column data type from object to datetime

df['Order Date'] = pd.to_datetime(df['Order Date'])

"""Kolom 'Order Date' sudah dikonversi dari objek menjadi tipe data datetime"""

# Changing the Customer ID column data type from integrer to object

df['Customer ID'] = df['Customer ID'].astype(str)

"""Kolom Customer ID sudah dikonversi dari integer menjadi tipe data object (string), karena Customer ID merupakan data kategorik nominal."""

print("DataFrame setelah penyesuaian\n")
df.info()

"""### 2.2.3 Handling Missing Values"""

# Check the NaN values in the df

df.isna().sum()

"""Tidak ada Missing Values"""

# Check is there any duplicated data in df

df.duplicated().sum()

"""Tidak ada data yang duplikat

#### Check Empty String Value
"""

empty_string = df.apply(lambda x: (x == '').any())
print(empty_string)

"""#### Check '0' String Values"""

has_zero = df.apply(lambda x: (x == 0).any())
print(has_zero)

(df[df['Profit'] == 0]).head()

len(df[df['Profit'] == 0])

"""Terdapat 65 data yang memiliki value '0' didalam kolom Profit dan dapat dikatakan bahwa tidak terjadi laba yang dihasilkan dari penjualan produk. Kita dapat menerima data tersebut karena itu masih bisa dikatakan normal untuk analisis yang akan digunakan"""

len(df[df['Discount'] == 0])

"""Terdapat 4.798 data yang memiliki nilai '0' di dalam kolom Discount. Kita masih dapat menerima data tersebut, 0 diskon merupakan normal dan bisa terjadi

### 2.2.4 Checking Outliers
"""

df.info()

"""Kita perlu cek outliers pada data numerik

#### Outliers Sales
"""

column = 'Sales'

# IQR Formula for Outliers
Q1 = df[column].quantile(0.25)
Q3 = df[column].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Count outliers
outliers = df[(df[column] < lower_bound) | (df[column] > upper_bound)]

# Apply the function to each group (Product) and get the count of outliers
total_outliers = outliers.groupby('Product')[['Product']].count().rename(columns={'Product': f'{column} Outliers'}).sort_values(ascending=False, by = f'{column} Outliers')
total_outliers

plt.figure(figsize=(12, 8))
sns.boxplot(x='Sales', y='Product', data=df, palette="Set2")

# Customize the plot
plt.title('Boxplot of Sales by Product')
plt.xlabel('Sales')
plt.ylabel('Product')
plt.xticks(rotation=45, ha='right')

# Display the plot
plt.tight_layout()
plt.show()

"""#### Outliers Quantity"""

column = 'Quantity'

# IQR Formula for Outliers
Q1 = df[column].quantile(0.25)
Q3 = df[column].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Count outliers
outliers = df[(df[column] < lower_bound) | (df[column] > upper_bound)]

# Apply the function to each group (Product) and get the count of outliers
total_outliers = outliers.groupby('Product')[['Product']].count().rename(columns={'Product': f'{column} Outliers'}).sort_values(ascending=False, by = f'{column} Outliers')
total_outliers

plt.figure(figsize=(12, 8))
sns.boxplot(x='Quantity', y='Product', data=df, palette="Set2")

# Customize the plot
plt.title('Boxplot of Quantity by Product')
plt.xlabel('Quantity')
plt.ylabel('Product')
plt.xticks(rotation=45, ha='right')

# Display the plot
plt.tight_layout()
plt.show()

"""#### Outliers Profit"""

column = 'Profit'

# IQR Formula for Outliers
Q1 = df[column].quantile(0.25)
Q3 = df[column].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Count outliers
outliers = df[(df[column] < lower_bound) | (df[column] > upper_bound)]

# Apply the function to each group (Product) and get the count of outliers
total_outliers = outliers.groupby('Product')[['Product']].count().rename(columns={'Product': f'{column} Outliers'}).sort_values(ascending=False, by = f'{column} Outliers')
total_outliers

plt.figure(figsize=(12, 8))
sns.boxplot(x='Profit', y='Product', data=df, palette="Set2")

# Customize the plot
plt.title('Boxplot of Profit by Product')
plt.xlabel('Profit')
plt.ylabel('Product')
plt.xticks(rotation=45, ha='right')

# Display the plot
plt.tight_layout()
plt.show()

"""Pemeriksaan outlier telah dilakukan dengan memeriksa outliers pada kolom sales, quantity, dan profit untuk setiap produk. Setiap kolom numerik memiliki jumlah outlier yang berbeda. Terdapat jumlah outlier yang tinggi pada kolom Product dan Sales. Namun, kita tetap membutuhkan informasi dari kolom Sales dan Profit karena outlier ini dapat memberikan insight tentang peristiwa atau pola unik yang berharga dalam pengambilan keputusan. Outlier ekstrim pada sales dan profit dapat memberikan insight yang berharga, dan menarik untuk dilakukan analisis lebih lanjut.

# 3. Data Analysis

## 3.1 Exploratory Data Analysis

Pada bagian ini, kita akan melakukan eksplorasi menyeluruh terhadap dataset untuk memahami struktur, isi, dan pola yang mendasarinya. Analisis ini akan memberikan wawasan berharga yang akan membimbing dan mengarahkan analisis lebih mendalam di tahap berikutnya. Dengan memeriksa berbagai aspek seperti distribusi data, korelasi, dan potensi anomali, kita dapat memastikan bahwa analisis selanjutnya menjadi lebih akurat dan efektif.
"""

df.head()

"""### 3.1.1 Data Distribution"""

def normality_test(df):
    # Pilih kolom numerik
    num_cols = df.select_dtypes(include=[np.number]).columns

    # Initialize lists to store results
    columns = []
    p_values = []
    is_normal = []

    # Uji Kolmogorov Smirnov test di setiap kolom numerik
    for col in num_cols:
        _, p_value = stats.kstest(df[col], 'norm')
        columns.append(col)
        p_values.append(p_value)
        is_normal.append("Normal" if p_value >= 0.05 else "Not Normal")

    # Buat hasil dari dataframe
    results_df = pd.DataFrame({
        'Column': columns,
        'P-value': p_values,
        'Distribution': is_normal
    })

    return results_df

# Masukkan fungsi kedalam dataframe
results = normality_test(df)

# Print Hasil
results

# Show distribution of numerical columns

# Create a 2x2 subplot layout
fig, axes = plt.subplots(2, 2, figsize=(21, 11))

# Plot a histogram for each numerical column
plt.subplot(2, 2, 1)
sns.histplot(data=df['Sales'], kde=True, bins=30)
plt.title('Distribusi Penjualan')
plt.xlabel('Sales')
plt.ylabel('Count')

plt.subplot(2, 2, 2)
sns.histplot(data=df['Quantity'], kde=True, bins=30)
plt.title('Distribusi Quantity')
plt.xlabel('Quantity')
plt.ylabel('Count')

plt.subplot(2, 2, 3)
sns.histplot(data=df['Discount'], kde=True, bins=30)
plt.title('Distribusi Discount')
plt.xlabel('Discount')
plt.ylabel('Count')

plt.subplot(2, 2, 4)
sns.histplot(data=df['Profit'], kde=True, bins=30)
plt.title('Distribusi Keuntungan')
plt.xlabel('Profit')
plt.ylabel('Count')

plt.tight_layout()
plt.show()

"""Dapat diketahui dalam dataset yang semua berdistribusi tidak normal. Oleh karena itu, kita perlu mempertimbangkan penggunaan metode analisis yang lebih sesuai, seperti uji non-parametrik dan pendekatan lain yang kurang sensitif terhadap outlier."""

df.head()

"""### 3.1.2 Correlation"""

korelasi = np.triu(df.corr(numeric_only=True, method='spearman'))

# Membuat heatmap untuk korelasi antara numerikal angka
sns.heatmap(df.corr(numeric_only=True),
            mask=korelasi,
            annot=True
            )
plt.title('Correlation of Numerical Column')

"""Dari Korelasi Heatmap diatas, korelasi paling tinggi antara Sales dan Profit dengan skor korelasi 0.48, dan Korelasi paling rendah yaitu antara Discount dan Profit dengan skor korelasi -0.22

### 3.1.3 Categorical Data Distribution
"""

df.info()

# Menunjukkan distribusi dari kolom kategorik
categorical_cols = df.select_dtypes(include=['object']).columns

# Drop kolom yang tidak digunakan
categorical_cols = categorical_cols.drop(['Order ID', 'Customer ID', 'Contact Name', 'License'])

# Membuat ukuran size dan style
plt.figure(figsize=(15, len(categorical_cols) * 5))

# Loop pada setiap kolom kategorik dan buat barplot
for i, col in enumerate(categorical_cols, 1):
    plt.subplot(len(categorical_cols), 1, i)

    # Membuat top 10 category
    top_categories = df[col].value_counts().nlargest(10)

    # Membuat bar plot untuk top 10 category
    ax = sns.barplot(y=top_categories.index, x=top_categories.values, palette='crest')
    plt.title(f'Top 10 Categories of {col}', fontdict={'fontweight':'bold'})
    plt.xlabel('Count')
    plt.ylabel(col)

    # Anotasi bar
    for p in ax.patches:
        width = p.get_width()
        ax.text(width, p.get_y() + p.get_height() / 2, f'{width}',
                ha='left', va='center', color='black')

plt.tight_layout()
plt.show()

"""Dari grafik diatas, kita dapat lihat top 10 values di setiap kolom kategorik. Kita dapat menggunakan informasi ini untuk analisis yang lebih lanjut berikutnya.

## 3.2 Data Analysis

### 3.2.1 Sales and Profit Trend Per Year

Di dalam analisis sales trend ini, kita akan membandingkan performa mengenai sales dan profit untuk mendapatkan insight yang menarik.
"""

# Membuat Trend Sales per Tahun

# Extract the year from the 'Order Date' column
df['Year'] = df['Order Date'].dt.year

# Group by year and sum the Sales
Sales_per_year = df.groupby('Year')['Sales'].sum().reset_index()

# Plotting the Sales trend per year
plt.figure(figsize=(10, 6))
plt.plot(Sales_per_year['Year'], Sales_per_year['Sales'], marker='o')

# Set x-ticks as integer values for the years
plt.xticks(Sales_per_year['Year'])

# Annotate total Sales for each year
for i in range(len(Sales_per_year)):
    year = Sales_per_year['Year'][i]
    Sales = Sales_per_year['Sales'][i]
    plt.annotate(f'${Sales:.1f}',
                 xy=(year, Sales),
                 xytext=(year, Sales + Sales * 0.02),
                 ha='center', fontsize=10, color='black')

# Add titles and labels
plt.title('Sales Trend per Year')
plt.xlabel('Year')
plt.ylabel('Total Sales')
plt.grid(True)

# Show the plot
plt.show()

"""Tren penjualan secara keseluruhan selama beberapa tahun menunjukkan peningkatan positif, meskipun terjadi penurunan pada tahun 2021.
- Pada tahun 2020 dan 2021, akibat pandemi COVID-19, ekonomi global mengalami penurunan. Penurunan ekonomi ini menyebabkan pengurangan dalam pengeluaran konsumen dan investasi bisnis dan memberikan dampak signifikan pada pendapatan perusahaan selama periode tersebut.
"""

# Make Profit trend per year

# Extract the year from the 'Order Date' column
df['Year'] = df['Order Date'].dt.year

# Group by year and sum the profit
profit_per_year = df.groupby('Year')['Profit'].sum().reset_index()

# Plotting the profit trend per year
plt.figure(figsize=(10, 6))
plt.plot(profit_per_year['Year'], profit_per_year['Profit'], marker='o')

# Set x-ticks as integer values for the years
plt.xticks(profit_per_year['Year'])

# Annotate total profit for each year
for i in range(len(profit_per_year)):
    year = profit_per_year['Year'][i]
    profit = profit_per_year['Profit'][i]
    plt.annotate(f'${profit:.1f}',
                 xy=(year, profit),
                 xytext=(year, profit + profit * 0.02),
                 ha='center', fontsize=10, color='black')

# Add titles and labels
plt.title('Profit Trend per Year')
plt.xlabel('Year')
plt.ylabel('Total Profit')
plt.grid(True)

# Show the plot
plt.show()

"""Meskipun pada sales mengalami penurunan pada tahun 2021, tren keuntungan dari penjualan mengalami kenaikan secara konsisten, dan kita dapat mengecek kenapa penjualan mengalami penurunan sedangkan keuntungan tetap mengalami tren kenaikan. Kita perlu menganalisis fenomena ini lebih lanjut."""

# Make Profit to Sales Ratio Trend per Year

# Group by year and sum the Sales and Profit
sales_per_year = df.groupby('Year')['Sales'].sum().reset_index()
profit_per_year = df.groupby('Year')['Profit'].sum().reset_index()

# Merge the Sales and Profit dataframes
sales_profit_per_year = pd.merge(sales_per_year, profit_per_year, on='Year', suffixes=('_Sales', '_Profit'))

# Calculate the Profit to Sales Ratio
sales_profit_per_year['Profit to Sales Ratio'] = sales_profit_per_year['Profit'] / sales_profit_per_year['Sales']

# Display the dataframe
sales_profit_per_year

# Plotting the Profit to Sales Ratio trend per year
plt.figure(figsize=(10, 6))
plt.plot(sales_profit_per_year['Year'], sales_profit_per_year['Profit to Sales Ratio'], marker='o')

# Set x-ticks as integer values for the years
plt.xticks(sales_profit_per_year['Year'])

# Annotate total profit for each year

for i in range(len(sales_profit_per_year)):
    year = sales_profit_per_year['Year'][i]
    profit_to_sales_ratio = sales_profit_per_year['Profit to Sales Ratio'][i]
    plt.annotate(f'{profit_to_sales_ratio * 100:.2f}',
                 xy=(year, profit_to_sales_ratio),
                 xytext=(year, profit_to_sales_ratio + profit_to_sales_ratio * 0.004),
                 ha='center', fontsize=10, color='black')

# Add titles and labels
plt.title('Profit to Sales Ratio Trend per Year')
plt.xlabel('Year')
plt.ylabel('Profit to Sales Ratio')
plt.grid(True)

# Show the plot
plt.show()

"""Meskipun terjadi penurunan penjualan pada tahun 2021, rasio laba terhadap penjualan mengalami kenaikan dibandingkan tahun 2020. Peningkatan rasio laba ini dapat dikaitkan dengan efisiensi operasional dan pengelolaan biaya yang efektif."""

# Data preparation (assume df is the original dataframe)
# Group by 'Year' and 'Region', then calculate total Sales and Profit
grouped_data = df.groupby(['Year', 'Region']).agg({'Sales': 'sum', 'Profit': 'sum'}).reset_index()

# Calculate Profit to Sales Ratio
grouped_data['Profit to Sales Ratio'] = grouped_data['Profit'] / grouped_data['Sales']

# Pivot the data for easier plotting
pivot_data = grouped_data.pivot(index='Region', columns='Year', values='Profit to Sales Ratio')

# Plotting
pivot_data.plot(kind='bar', figsize=(12, 7), colormap='crest')

# Add title and labels
plt.title('Profit to Sales Ratio per Year and Region')
plt.xlabel('Region')
plt.ylabel('Profit to Sales Ratio')
plt.xticks(rotation=0)  # Rotate x-axis labels for better readability
plt.legend(title='Region', loc='upper left')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Show plot
plt.show()

"""Ini merupakan pembuktian dari tren sales to profit ratio, mengapa pada tahun 2022 - 2023 terjadi penurunan dikarenakan pada region APJ dan EMEA terjadi penurunan penjualan pada tahun 2023

### 3.2.2 Customer and Product Segment Analysis

Pada segmen ini akan membahas mengenai
1. Sales Contribution: Analisis berapa banyak segmen yang memberi kontribusi pada penjualan dan keuntungan
2. Product Preferences: Identifikasi produk apa yang paling populer di setiap segmen
3. Demographic Analysis: Membandingkan segmen customer berdasarkan demografi termasuk region country
"""

df.head()

"""#### **Customer Segment Proportion**"""

df['Segment'].value_counts()

# Membuat Pie Chart untuk distribusi segmen customer

# Menghitung customer disetiap segmen
segment_counts = df['Segment'].value_counts()

# Membuat customer segmen di Pie Chart
plt.figure(figsize=(10, 6))
plt.pie(segment_counts, labels=segment_counts.index, autopct='%1.1f%%', startangle=140)

# Buat judul dan label
plt.title('Customer Segment Distribution')

# Show the plot
plt.show()

"""Dapat dilihat dari Pie Chart diatas, **Mayoritas customer merupakan SMB (Small and Medium size Business atau Usaha Kecil dan Menengah)**. Hal ini mungkin disebabkan oleh produk yang sesuai dengan kebutuhan dan anggaran. SMB sering mencari barang yang hemat biaya, sehingga penawaran dari perusahaan kami menjadi menarik bagi SMB. SMB juga memiliki jumlah pelanggan potensial yang lebih besar sehingga dapat menjelaskan mengapa memiliki proporsi yang lebih besar

**Segmen Enterprise** memiliki prororsi paling kecil. Hal ini mungkin disebabkan oleh siklus penjualan yang lebih panjang, proses pengambilan keputusan yang lebih kompleks di perusahaan besar. Perusahaan besar juga mungkin sudah memiliki kemitraan dengan penyedia lain yang menyebabkan perusahaan kita lebih sulit untuk menembus segmen enterprise.
"""

# Tunjukkan total sales dan profit dari customer segment

# Group by Segment and sum the Sales and Profit
sales_by_segment = df.groupby('Segment')['Sales'].sum().reset_index().sort_values(by='Sales', ascending=False)
profit_by_segment = df.groupby('Segment')['Profit'].sum().reset_index().sort_values(by='Profit', ascending=False)

# Set ukuran size dan juga style
plt.figure(figsize=(21, 6))

# Plotting the Sales by Customer Segment
plt.subplot(1, 2, 1)
sns.barplot(data = sales_by_segment, x='Segment', y='Sales', palette='viridis')
plt.title('Sales by Customer Segment')
plt.xlabel('Segment')
plt.ylabel('Total Sales')

# Plotting the Profit by Customer Segment
plt.subplot(1, 2, 2)
sns.barplot(data = profit_by_segment, x='Segment', y='Profit', palette='viridis')
plt.title('Profit by Customer Segment')
plt.xlabel('Segment')
plt.ylabel('Total Profit')

# Adjust layout
plt.tight_layout()
plt.show()

"""SMB memiliki kontribusi yang sangat besar untuk penjualan dan keuntungan yang didapat, dan diikuti dengan Strategic dan Enterprise Segment. Distribusi penjualan dan keuntungan di seluruh segmen sejalan dengan proporsi pelanggan, menunjukkan bahwa segmen SMB menjadi pendorong utama pendapatan.

#### **Top Customer Product Proportion**
"""

# Plot the top 10 products
plt.figure(figsize=(10, 6))
top_products = df['Product'].value_counts().nlargest(10)
ax = sns.barplot(y=top_products.index, x=top_products.values, palette='crest')
plt.title('Top 10 Categories of Product', fontdict={'fontweight': 'bold'})
plt.xlabel('Count')
plt.ylabel('Product')

# Annotate the barplot with counts
for p in ax.patches:
    width = p.get_width()
    ax.text(width, p.get_y() + p.get_height() / 2, f'{int(width)}',
            ha='left', va='center', color='black')

plt.tight_layout()
plt.show()

"""- ContactMatcher, Support, FinanceHub merupakan top produk dan memiliki penjualan yang paling tinggi di perusahaan kita.

#### **Compare Customer Segment by Demographic such as region and country**
"""

df.head()

# Create a figure with two subplots
fig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, figsize=(21, 6))

# Group by Region and sum the Sales
sales_by_region = df.groupby('Region')['Sales'].sum().reset_index()

# Sort the regions by Sales in descending order
sales_by_region = sales_by_region.sort_values(by='Sales', ascending=False)

# Plotting the Region by Sales descending order
sns.barplot(data=sales_by_region, x='Region', y='Sales', palette='viridis', ax=ax0)

# Add titles and labels for sales plot
ax0.set_title('Sales by Region')
ax0.set_xlabel('Region')
ax0.set_ylabel('Total Sales')

# Group by Region and sum the Profit
profit_by_region = df.groupby('Region')['Profit'].sum().reset_index().sort_values(by='Profit', ascending=False)

# Plotting the Region by Profit descending order
sns.barplot(data=profit_by_region, x='Region', y='Profit', palette='viridis', ax=ax1)

# Add titles and labels for profit plot
ax1.set_title('Profit by Region')
ax1.set_xlabel('Region')
ax1.set_ylabel('Total Profit')

# Adjust the layout and show the plot
plt.tight_layout()
plt.show()

"""Dari gambar bar yang ada diatas, distribusi rasio penjualan dan laba di setiap wilayah relatif seimbang. Namun perlu diketahui bahwa wilayah APJ memiliki keuntungan yang paling sedikit jika dibandingkan dengan penjualan dan dibandingkan dengan dengan wilayah lain kita perlu memperhatikan lebih lanjut untuk wilayah tersebut untuk bisa mendapatkan keputusan yang tepat guna menaikkan keuntungan."""

# Show top 10 Country by sales

# Group by Country and sum the Sales
top_sales_country = df.groupby('Country')['Sales'].sum().reset_index()

# Sort the countries by Sales in descending order
top_sales_country = top_sales_country.sort_values(by='Sales', ascending=False).head(10)

# Plotting the Country by Sales descending order
plt.figure(figsize=(10, 6))
sns.barplot( data=top_sales_country, x='Sales', y='Country',palette='crest')

# Add titles and labels
plt.title('Top 10 Country by Sales')
plt.xlabel('Total Sales')
plt.ylabel('Country')

# Show the plot
plt.show()

# show top 10 country with most profit and show it in bar plot

# Group by Country and sum the Profit
top_profit_country = df.groupby('Country')['Profit'].sum().reset_index()

# Sort the countries by Profit in descending order
top_profit_country = top_profit_country.sort_values(by='Profit', ascending=False)

# Plotting the Country by Profit descending order
plt.figure(figsize=(10, 10))
sns.barplot(data=top_profit_country, x='Profit', y='Country',palette='crest')

# Add titles and labels
plt.title('Country by Total Profit')
plt.xlabel('Total Profit')
plt.ylabel('Country')

# Show the plot
plt.show()

"""- Amerika Serikat memiliki jumlah penjualan dan laba tertinggi, diikuti oleh Inggris. Hal ini menunjukkan bahwa pasar AS dan Inggris merupakan sumber utama dari pendapatan yang diterima."""

# Group by Country and sum the Profit
top_loss_country = df.groupby('Country')['Profit'].sum().reset_index()

# Sort the countries by Profit in order
top_loss_country = top_loss_country[top_loss_country['Profit'] < 0].sort_values(by='Profit', ascending=True)

# Plotting the Country by Profit descending order
plt.figure(figsize=(10, 6))
sns.barplot(data=top_loss_country, x='Profit', y='Country',palette='crest')

# Add titles and labels
plt.title('Countries with Negative Profit')
plt.xlabel('Total Profit')
plt.ylabel('Country')

# Show the plot
plt.show()

"""- Terdapat pola yang sangat unik dalam distribusi penjualan dan laba. Jepang berada di peringkat ke-3 dalam hal penjualan, tetapi Jepang adalah negara dengan kerugian perusahaan terbesar (-$25.729). Penjualan tinggi di Jepang tidak berarti laba yang tinggi. Hal ini mungkin disebabkan oleh tingginya biaya operasional, pembatasan kebijakan, atau faktor non-teknis lainnya.

- Selain Jepang, terdapat beberapa negara dengan laba negatif seperti Mexico yang berada di peringkat 8 dalam hal penjualan namun laba yang diterima juga negatif. Hal ini perlu diselidiki lebih lanjut untuk memahami penyebabnya dan menemukan solusi yang potensial.

## 3.3 Identify of Phenomena

Dalam bagian ini, kita akan mencari cara untuk untuk faktor-faktor apa yang dapat meningkatkan penjualan dan laba. Berikut merupakan beberapa faktor yang merupakan turunan dari karakteristik bisnis SaaS:
- Faktor Pertumbuhan Customer tiap tahun, karena pendapatan dihasilkan melalui customer.
- Faktor Penawaran Harga diskon untuk melihat bagaimana ketertarikan dari customer apakah meningkat atau masih sama saja dan perlu memikirkan terlebih dahulu pengaruh diskon terhadap penjualan dan laba.

### Total Customer Growth Per Year
"""

customer_count_per_year = df.groupby('Year')['Customer'].nunique().reset_index()
customer_count_per_year

# Count every distinct customer every year and show it in line plot

# Extract the year from the 'Order Date' column
df['Year'] = df['Order Date'].dt.year

# Group by year and count the distinct customers
customer_count_per_year = df.groupby('Year')['Customer'].nunique().reset_index()

# Plotting the Customer Count per Year
plt.figure(figsize=(10, 6))
plt.plot(customer_count_per_year['Year'], customer_count_per_year['Customer'], marker='o')

# Set x-ticks as integer values for the years
plt.xticks(customer_count_per_year['Year'])

# Annotate total customers for each year
for i in range(len(customer_count_per_year)):
    year = customer_count_per_year['Year'][i]
    customer_count = customer_count_per_year['Customer'][i]
    plt.annotate(f'{customer_count}',
                 xy=(year, customer_count),
                 xytext=(year, customer_count + customer_count * 0.02),
                 ha='center', fontsize=10, color='black')

# Add titles and labels
plt.title('Customer Count per Year')
plt.xlabel('Year')
plt.ylabel('Total Customers')
plt.grid(True)

# Show the plot
plt.show()

"""Dari hasil analisis diatas total pertumbuhan customer dari tahun 2020 hingga tahun 2023, total pelanggan per tahun sama berjumlah 99 customer tiap tahunnya. Mungkin hal ini dapat diasumsikan bahwa menunjukkan tren yang baik dalam mempertahankan pelanggan, karena tidak terjadi penurunan total pelanggan dari tiap tahunnya.

### Effect of the Product Discount

Setelah kita menganalisis jumlah customer tiap tahun, dapat diketahui bahwa jumlah customernya tetap berjumlah 99 dan tidak mengalami kenaikan maupun penurunan. Langkah yang mungkin kita lakukan agar penjualan dan laba mengalami peningkatan adalah menawarkan diskon kepada customer agar customer memiliki ketertarikan untuk membeli produk yang diberikan diskon dari perusahaan.
"""

# Filter data for Japan
japan_discount = df[df['Country'] == 'Japan']

# Check the mean of the Discount in Japan
average_discount_japan = japan_discount['Discount'].mean()

# Display the result
average_discount_japan

"""Dapat dilihat dari rata-rata diskon yang ada di Jepang sebesar 0.37% sehingga untuk meningkatkan profit di Jepang perlu menurunkan diskon yang dilakukan dan perlu memperhatikan biaya operasional yang terjadi disana, faktor-faktor non-teknis lainnya."""

# Filter data for Japan
japan_quantity = df[df['Country'] == 'Japan']

# Group by Product and calculate the total quantity and average discount
quantity_discount_by_product_japan = japan_quantity.groupby('Product').agg(
    Total_Quantity=('Quantity', 'sum'),
    Average_Discount=('Discount', 'mean')
).sort_values(by='Total_Quantity', ascending=False)

# Display the result
quantity_discount_by_product_japan

"""Dari tabel Quantity per product dapat diketahui bahwa product yang paling banyak dibeli yaitu ContactMatcher 744 dengan diskon 0.71%, Support sebanyak 637 dengan diskon 0.2%, dan FinanceHub sebanyak 331 dengan diskon 0.26%. Ada fenomena menarik produk paling tinggi diskonnya yaitu OneView dengan diskon 0.8% namun hanya dibeli sebanyak 159. Perlu dipikirkan lebih ulang faktor-faktor apa yang menyebabkan produk OneView di Negara Jepang tidak terlalu banyak dibeli apakah kualitas produk yang tidak cocok dengan kebutuhan customer di Negara Jepang atau customer lain sudah loyal terhadap perusahaan tertentu. Kita perlu mengkaji ulang untuk menarik customer. Untuk meningkatkan profit sepertinya perlu mengurangi diskon di produk ContactMatcher hingga sebesar 0.37% karena itu merupakan rata-rata diskon yang ada di Jepang sebab quantity pembeliannya sangat tinggi."""



# Check the correlation of discount with sales and profit

df[['Discount', 'Profit', 'Sales']].corr('spearman')

"""Dari analisis korelasi, terdapat insight menarik:
- Korelasi antara laba dan diskon adalah (-0.54), yang menunjukkan bahwa diskon akan mengurangi laba yang akan dihasilkan.
- Korelasi antara diskon dan penjualan adalah (-0.05) yang menunjukkan bahwa dapat diasumsikan jika diskon tidak terlalu efektif dalam meningkatkan penjualan karena mungkin customer tidak terlalu mencari diskon dari suatu produk yang ditawarkan.
"""

# Create a scatterplot to show the correlation between Discount and Sales
plt.figure(figsize=(10, 6))

# Plotting the correlation between Discount and Sales
sns.scatterplot(data=df, x='Discount', y='Sales', palette='Set3')

# Add titles and labels
plt.title('Correlation between Discount and Sales')
plt.xlabel('Discount')
plt.ylabel('Sales')

# Show the plot
plt.show()

"""- Dari scatterplot di atas, kita dapat melihat nilai penjualan untuk setiap nilai diskon dan menunjukkan bahwa dengan diskon 0, kita masih mendapatkan nilai penjualan yang tinggi. Ini merupakan tanda yang baik sebab pelanggan tidak terlalu mencari diskon untuk membeli produk yang ditawarkan.
- Namun terdapat insight menarik bahwa penjualan terbesar terjadi ketika diskon sebesar 0.5. Jadi, kita juga dapat berasumsi bahwa diskon sebenarnya masih relevan untuk meningkatkan penjualan, meski efeknya tidak terlalu signifikikan
- Dari insight ini kita dapat mengetahui bahwa strategi pemberian diskon menolak dan menerima analisis kita. Meskipun mayoritas customer berasal dari SMB(Small Medium Business) yang lebih ketat dalam hal anggaran, namun dapat dikatakan bahwa kepercayaan dari sektor SMB tinggi karena customer tetap bersedia membayar harga penuh walaupun tidak ada penawaran diskon produk dari perusahaan.

# 4. Conclusion and Recommendation

## 4.1 Conclusion

**Sales and Profit Trend Per Year**
- Tren penjualan: Penjualan secara umum meningkat dari tahun ke tahun, namun terjadi penurunan pada tahun 2021. Hal ini mungkin disebabkan oleh pandemi COVID-19 yang terjadi selama periode 2020-2021
- Tren laba: Meskipun penjualan mengalami penurunan pada tahun 2021, namun berbanding terbalik dengan tren laba yang terus mengalami peningkatan dari tahun 2020 hingga tahun 2023. Hal ini menunjukkan bahwa meskipun tren penjualan terjadi penurunan pada tahun 2021 namun perusahaan bisa mengendalikan dengan efisien dengan memperbaiki margin laba untuk menangani pandemi COVID-19.
- Rasio laba terhadap penjualan: Rasio laba terhadap penjualan meningkat pada tahun 2021, kemungkinan terjadi karena efisiensi operasional dan pengelolaan biaya yang lebih baik.

**Customer and Product Segment Analysis**
- Sebagian besar customer berasal dari SMB (Usaha Kecil Menengah). Produk kami kemungkinan cocok dengan kualitas dan harga yang ditawarkan sehingga mereka senang membeli produk di perusahaan kami.
- Segmen enterprise merupakan customer segment yang paling kecil, kemungkinan disebabkan oleh kebutuhan mereka(segmen enterprise) yang lebih kompleks dan sudah menjalin kemitraan dengan penyedia produk yang lain.
- SMB memberikan kontribusi terbesar terhadap penjualan dan laba, diikuti oleh segmen Strategic dan Enterprise.
- Penjualan dan laba relatif seimbang di seluruh wilayah, tetapi wilayah APJ memiliki laba yang sangat rendah meskipun penjualannya cukup baik
- Amerika Serikat dan Inggris merupakan dua negara yang menghasilkan penjualan dan laba keuntungan tertinggi dari produk yang ditawarkan.
- Fenomena unik yang terjadi di Negara Jepang, Jepang menempati peringkat ketiga dalam penjualan namun memiliki laba kerugian terbesar. Penjualan tinggi tidak sejalan dengan laba yang tinggi, kemungkinan karena biaya operasional yang tinggi, pembatasan kebijakan, maupun faktor non-teknis lainnya. Dan hal ini memerlukan analisis lebih lanjut untuk menginvestigasi apa penyebab dari fenomena tersebut.

**Identify of Phenomena**
- Perusahaan kami menunjukkan tren yang baik dalam mempertahankan customer terlihat dari jumlah pelanggan yang setidaknya tidak menurun tiap tahunnya.
- Dampak yang diberikan oleh diskon, pelanggan tidak terlalu mencari diskon untuk membeli produk yang ditawarkan oleh perusahaan dan diskon memiliki dampak negatif terhadap laba, namun penjualan terbesar terjadi ketika diskon sebesar 0.5. Hal ini menunjukkan bahwa diskon masih relevan untuk meningkatkan penjualan, meskipun efeknya tidak signifikan
- Product yang memiliki quantity tinggi dan diskon yang paling tinggi yaitu OneView diskon sebesar 0.8%, namun customer yang hanya membeli sebanyak 159 saja hal ini perlu dikaji lebih lanjut apakah fakktor kualitas produk yang kalah saing dengan perusahaan lain atau customer lain sudah berlangganan dengan perusahaan lain.

## 4.2 Recommendation

- **Fokus pada Retensi Customer**, karena pendapatan didorong oleh sistem langganan, dan memprioritaskan strategi untuk meningkatkan retensi pelanggan seperti penawaran program loyalitas untuk tetap berlangganan dalam jangka panjang agar tetap membeli produk yang ditawarkan dari perusahaan.
- **Optimalkan Strategi Harga dan Diskon**, meskipun diskon dapat menarik pelanggan baru, namun diskon juga dapat berdampak negatif pada laba. Untuk customer yang sudah lama tidak diberikan diskon dan untuk menarik customer baru perlu diberikan diskon (0.5%). Pertimbangkan untuk menerapkan diskon yang ditargetkan seperti penawaran diskon(0.5%) yang telah terbukti meningkatkan penjualan secara drastis namun mengurangi margin laba. Namun terdapat customer yang melakukan transaksi tanpa adanya diskon dari produk dan kesediaan customer untuk melakukan pembayaran secara penuh mungkin hal ini disebabkan oleh kualitas yang cocok dengan customer dan sistem kepercayaan dari customer untuk tetap membeli produk di perusahaan. Membangun loyalitas customer perlu dilakukan agar tidak terjadi penurunan dalam tren jumlah penjualan.
- **Menyelidiki wilayah dengan Laba Rendah namun jumlah penjualan dapat dibilang baik**, wilayah APJ menunjukkan laba rendah meskipun penjualan cukup baik. Selidiki tantangan apa yang terjadi di wilayah tersebut apakah karena biaya operasional yang tinggi, kondisi pasar disana seperti apa, pembatasan kebijakan yang terjadi terhadap transaksi yang dilakukan. Dan lakukan strategi bisnis yang sesuai sebelum melakukan pengambilan keputusan di wilayah tersebut.
- **Revisi Strategi di Jepang**, perlu dilakukan investigasi lebih lanjut terhadap strategi yang dilakukan di Jepang untuk menghasilkan laba yang besar dengan melakukan kajian ulang terhadap produk OneView apakah kualitas produk perusahaan kalah saing dengan perusahaan lain ataupun tidak, melakukan efisiensi operasional yang dilakukan, maupun penyesuaian harga produk ulang di Jepang dengan melihat kondisi pasar disana.
"""

